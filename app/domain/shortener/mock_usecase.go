// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package shortener

import (
	"context"
	"github.com/alexmourapb/url-shortener/app/domain/shortener/vos"
	"github.com/rs/zerolog"
	"sync"
)

// Ensure, that UseCaseMock does implement UseCase.
// If this is not the case, regenerate this file with moq.
var _ UseCase = &UseCaseMock{}

// UseCaseMock is a mock implementation of UseCase.
//
// 	func TestSomethingThatUsesUseCase(t *testing.T) {
//
// 		// make and configure a mocked UseCase
// 		mockedUseCase := &UseCaseMock{
// 			CreateFunc: func(ctx context.Context, url string) (string, error) {
// 				panic("mock out the Create method")
// 			},
// 			GetFunc: func(ctx context.Context, log *zerolog.Logger, id string) (string, error) {
// 				panic("mock out the Get method")
// 			},
// 			UpdateFunc: func(ctx context.Context, log *zerolog.Logger, input vos.UpdateInput) error {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedUseCase in code that requires UseCase
// 		// and then make assertions.
//
// 	}
type UseCaseMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, url string) (string, error)

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, log *zerolog.Logger, id string) (string, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, log *zerolog.Logger, input vos.UpdateInput) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// URL is the url argument value.
			URL string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Log is the log argument value.
			Log *zerolog.Logger
			// ID is the id argument value.
			ID string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Log is the log argument value.
			Log *zerolog.Logger
			// Input is the input argument value.
			Input vos.UpdateInput
		}
	}
	lockCreate sync.RWMutex
	lockGet    sync.RWMutex
	lockUpdate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *UseCaseMock) Create(ctx context.Context, url string) (string, error) {
	if mock.CreateFunc == nil {
		panic("UseCaseMock.CreateFunc: method is nil but UseCase.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		URL string
	}{
		Ctx: ctx,
		URL: url,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, url)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedUseCase.CreateCalls())
func (mock *UseCaseMock) CreateCalls() []struct {
	Ctx context.Context
	URL string
} {
	var calls []struct {
		Ctx context.Context
		URL string
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *UseCaseMock) Get(ctx context.Context, log *zerolog.Logger, id string) (string, error) {
	if mock.GetFunc == nil {
		panic("UseCaseMock.GetFunc: method is nil but UseCase.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Log *zerolog.Logger
		ID  string
	}{
		Ctx: ctx,
		Log: log,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, log, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedUseCase.GetCalls())
func (mock *UseCaseMock) GetCalls() []struct {
	Ctx context.Context
	Log *zerolog.Logger
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		Log *zerolog.Logger
		ID  string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *UseCaseMock) Update(ctx context.Context, log *zerolog.Logger, input vos.UpdateInput) error {
	if mock.UpdateFunc == nil {
		panic("UseCaseMock.UpdateFunc: method is nil but UseCase.Update was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Log   *zerolog.Logger
		Input vos.UpdateInput
	}{
		Ctx:   ctx,
		Log:   log,
		Input: input,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, log, input)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedUseCase.UpdateCalls())
func (mock *UseCaseMock) UpdateCalls() []struct {
	Ctx   context.Context
	Log   *zerolog.Logger
	Input vos.UpdateInput
} {
	var calls []struct {
		Ctx   context.Context
		Log   *zerolog.Logger
		Input vos.UpdateInput
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
