// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package shortener

import (
	"context"
	"github.com/alexmourapb/url-shortener/app/domain/shortener/entities"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			GetByIDFunc: func(ctx context.Context, id string) (*entities.ShortURL, error) {
// 				panic("mock out the GetByID method")
// 			},
// 			SaveFunc: func(ctx context.Context, id string, url string) error {
// 				panic("mock out the Save method")
// 			},
// 			UpdateFunc: func(ctx context.Context, input entities.ShortURL) error {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id string) (*entities.ShortURL, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, id string, url string) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, input entities.ShortURL) error

	// calls tracks calls to the methods.
	calls struct {
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// URL is the url argument value.
			URL string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input entities.ShortURL
		}
	}
	lockGetByID sync.RWMutex
	lockSave    sync.RWMutex
	lockUpdate  sync.RWMutex
}

// GetByID calls GetByIDFunc.
func (mock *RepositoryMock) GetByID(ctx context.Context, id string) (*entities.ShortURL, error) {
	if mock.GetByIDFunc == nil {
		panic("RepositoryMock.GetByIDFunc: method is nil but Repository.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//     len(mockedRepository.GetByIDCalls())
func (mock *RepositoryMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *RepositoryMock) Save(ctx context.Context, id string, url string) error {
	if mock.SaveFunc == nil {
		panic("RepositoryMock.SaveFunc: method is nil but Repository.Save was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
		URL string
	}{
		Ctx: ctx,
		ID:  id,
		URL: url,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, id, url)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedRepository.SaveCalls())
func (mock *RepositoryMock) SaveCalls() []struct {
	Ctx context.Context
	ID  string
	URL string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
		URL string
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RepositoryMock) Update(ctx context.Context, input entities.ShortURL) error {
	if mock.UpdateFunc == nil {
		panic("RepositoryMock.UpdateFunc: method is nil but Repository.Update was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input entities.ShortURL
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, input)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedRepository.UpdateCalls())
func (mock *RepositoryMock) UpdateCalls() []struct {
	Ctx   context.Context
	Input entities.ShortURL
} {
	var calls []struct {
		Ctx   context.Context
		Input entities.ShortURL
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// Ensure, that CacheRepositoryMock does implement CacheRepository.
// If this is not the case, regenerate this file with moq.
var _ CacheRepository = &CacheRepositoryMock{}

// CacheRepositoryMock is a mock implementation of CacheRepository.
//
// 	func TestSomethingThatUsesCacheRepository(t *testing.T) {
//
// 		// make and configure a mocked CacheRepository
// 		mockedCacheRepository := &CacheRepositoryMock{
// 			DeleteFunc: func(key string) error {
// 				panic("mock out the Delete method")
// 			},
// 			GetURLFunc: func(key string) (*entities.ShortURL, error) {
// 				panic("mock out the GetURL method")
// 			},
// 			SaveFunc: func(key string, value interface{}) error {
// 				panic("mock out the Save method")
// 			},
// 		}
//
// 		// use mockedCacheRepository in code that requires CacheRepository
// 		// and then make assertions.
//
// 	}
type CacheRepositoryMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(key string) error

	// GetURLFunc mocks the GetURL method.
	GetURLFunc func(key string) (*entities.ShortURL, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(key string, value interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Key is the key argument value.
			Key string
		}
		// GetURL holds details about calls to the GetURL method.
		GetURL []struct {
			// Key is the key argument value.
			Key string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value interface{}
		}
	}
	lockDelete sync.RWMutex
	lockGetURL sync.RWMutex
	lockSave   sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *CacheRepositoryMock) Delete(key string) error {
	if mock.DeleteFunc == nil {
		panic("CacheRepositoryMock.DeleteFunc: method is nil but CacheRepository.Delete was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(key)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedCacheRepository.DeleteCalls())
func (mock *CacheRepositoryMock) DeleteCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// GetURL calls GetURLFunc.
func (mock *CacheRepositoryMock) GetURL(key string) (*entities.ShortURL, error) {
	if mock.GetURLFunc == nil {
		panic("CacheRepositoryMock.GetURLFunc: method is nil but CacheRepository.GetURL was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockGetURL.Lock()
	mock.calls.GetURL = append(mock.calls.GetURL, callInfo)
	mock.lockGetURL.Unlock()
	return mock.GetURLFunc(key)
}

// GetURLCalls gets all the calls that were made to GetURL.
// Check the length with:
//     len(mockedCacheRepository.GetURLCalls())
func (mock *CacheRepositoryMock) GetURLCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockGetURL.RLock()
	calls = mock.calls.GetURL
	mock.lockGetURL.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *CacheRepositoryMock) Save(key string, value interface{}) error {
	if mock.SaveFunc == nil {
		panic("CacheRepositoryMock.SaveFunc: method is nil but CacheRepository.Save was just called")
	}
	callInfo := struct {
		Key   string
		Value interface{}
	}{
		Key:   key,
		Value: value,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(key, value)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedCacheRepository.SaveCalls())
func (mock *CacheRepositoryMock) SaveCalls() []struct {
	Key   string
	Value interface{}
} {
	var calls []struct {
		Key   string
		Value interface{}
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
